AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  LambdaKinesis

  Demonstrate Error handling Integrating Lambda with Kinesis

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Tags:
      Project: KinesisLambdaError

Resources:
  #-------------------------------------------------
  # Scenario 1 run the Lambda functions at the Region level to talk to a Kinesis stream in the same region
  S3EventData:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "kds-eventdata"

  s1eventdata:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: LambdaKinesisTest2
      ShardCount: 1

  s1producerErr:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: s1_producer_errs/
      Handler: producer.lambda_handler
      Runtime: python3.9
      Timeout: 30
      FunctionName: KdsErrProducer
      Environment:
        Variables:
          STREAM_NAME: !Ref s1eventdata
          ROW_COUNT: 10
      Policies:
        - AWSLambdaKinesisExecutionRole
        - AmazonKinesisFullAccess
        - AWSLambda_FullAccess

  gatherTrigger:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: s1_consumer/
      Handler: gather.lambda_handler
      Runtime: python3.9
      FunctionName: gatherTrigger
      Timeout: 10
      Tracing: Active
      Policies:
        - AmazonSQSFullAccess
        - AWSLambdaExecute
        - AWSLambda_FullAccess
      Environment:
        Variables:
          SQS_Queue_URL: !Ref TimeoutQueue
          TRIGGERED: "Invoke"
      Events:
        SQSSuccessEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TimeoutQueue.Arn
            BatchSize: 30
            MaximumBatchingWindowInSeconds: 120

  gatherManual:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: s1_consumer/
      Handler: gather.lambda_handler
      Runtime: python3.9
      FunctionName: gatherManual
      Timeout: 10
      Tracing: Active
      Policies:
        - AmazonSQSFullAccess
        - AWSLambda_FullAccess
      Environment:
        Variables:
          SQS_Queue_URL: !Ref InfraQueue
          TRIGGERED: "None"


  PublisherToMilestones:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: s1_consumer/
      Handler: PublishMilestones.lambda_handler
      Runtime: python3.9
      FunctionName: PublishMilestones
      Timeout: 10
#      Layers:
#        - !Ref PythonPackages
      Tracing: Active
      Environment:
        Variables:
          STREAM_NAME: !Ref s1eventdata
          TIMEOUT_SQS_URL: !Ref TimeoutQueue
          DLQ_SQS_URL: !Ref dlqQueue
          INFRA_SQS_URL: !Ref InfraQueue
      Policies:
        - AWSLambdaKinesisExecutionRole
        - AmazonKinesisFullAccess
        - AmazonSQSFullAccess
        - AWSLambda_FullAccess
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt s1eventdata.Arn
            BatchSize: 20
            MaximumBatchingWindowInSeconds: 20
            MaximumRecordAgeInSeconds: 120
            StartingPosition: LATEST
            MaximumRetryAttempts: 0
            BisectBatchOnFunctionError: true




  s1producerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${s1producerErr}
      RetentionInDays: 1

  gatherTriggerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${gatherTrigger}
      RetentionInDays: 1

  gatherManualLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${gatherManual}
      RetentionInDays: 1

  dlqQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: dlqQueue
      DelaySeconds: 5



  TimeoutQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: TimeoutQueue
      DelaySeconds: 5
      ReceiveMessageWaitTimeSeconds: 20

  InfraQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: infraQueue
      DelaySeconds: 5



  SuccessTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: "Success"
      PrimaryKey:
        Name: iteration
        Type: Number






